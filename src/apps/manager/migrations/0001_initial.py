# Generated by Django 5.1.3 on 2024-12-15 16:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import src.utils.enums
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Team",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=128)),
                ("country", models.IntegerField(choices=src.utils.enums.Countries.choices)),
                ("fifa_version", models.IntegerField(choices=src.utils.enums.FIFAVersion.choices)),
                ("rating", models.PositiveIntegerField()),
                ("attack", models.PositiveIntegerField()),
                ("midfield", models.PositiveIntegerField()),
                ("defense", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("nickname", models.CharField(blank=True, max_length=64, null=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("timezone", models.CharField(default="UTC", max_length=32)),
                ("telegram_user_id", models.IntegerField(blank=True, null=True)),
                ("telegram_chat_id", models.IntegerField(blank=True, null=True)),
                ("telegram_username", models.CharField(max_length=64, unique=True)),
                ("victories", models.PositiveIntegerField(default=0)),
                ("losses", models.PositiveIntegerField(default=0)),
                ("draws", models.PositiveIntegerField(default=0)),
                ("fifa_versions", models.JSONField(default=list)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Tournament",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("is_active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=128)),
                ("rules_url", models.URLField()),
                ("start_date", models.DateField()),
                ("circles_number", models.PositiveIntegerField()),
                ("fifa_version", models.IntegerField(choices=src.utils.enums.FIFAVersion.choices)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("available_teams", models.ManyToManyField(related_name="tournaments", to="manager.team")),
                ("participants", models.ManyToManyField(related_name="tournaments", to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("date", models.DateTimeField()),
                ("is_completed", models.BooleanField(default=False)),
                ("first_player_score", models.PositiveIntegerField(blank=True, null=True)),
                ("second_player_score", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "first_player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="games_as_first",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "second_player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="games_as_second",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "first_player_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="games_as_first_team",
                        to="manager.team",
                    ),
                ),
                (
                    "second_player_team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="games_as_second_team",
                        to="manager.team",
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="games", to="manager.tournament"
                    ),
                ),
            ],
        ),
    ]
